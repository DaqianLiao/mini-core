buildscript {
    ext {
        spring_dependency_management = "1.0.9.RELEASE"
        spring_boot_version = "2.3.1.RELEASE"
        spring_version = "5.2.7.RELEASE"
        kotlin_version = "1.3.72"
        junit_version = "4.12"
    }

    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/repositories/releases/" }
        mavenCentral()
        mavenLocal()
        jcenter()
        google()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/repositories/releases/" }
        mavenCentral()
        mavenLocal()
        jcenter()
        google()
    }
}

subprojects {
//    apply plugin: "maven-publish"
//    apply plugin: "java-library"
//    apply plugin: "eclipse"
//    apply plugin: "maven"

    //noinspection SpellCheckingInspection
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "java"
    apply plugin: "idea"

    // 统一配置Group与版本
    group "com.mini"
    version "1.0"

    // 源文件运行版本与编译版本
    sourceCompatibility = "11"
    targetCompatibility = "11"

    compileKotlin {
        //noinspection GrUnresolvedAccess
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        //noinspection GrUnresolvedAccess
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    //noinspection GrUnresolvedAccess
    java {
        //noinspection GrUnresolvedAccess
        withJavadocJar()
        //noinspection GrUnresolvedAccess
        withSourcesJar()
    }

    test {
        useJUnitPlatform()
    }

    task sourceJar(type: Jar) {
        //noinspection GrUnresolvedAccess
        from sourceSets.main.allSource
    }

    artifacts {
        //noinspection GrUnresolvedAccess
        archives sourceJar
    }

    tasks.withType(Javadoc) { //兼容中文
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options {
            encoding "UTF-8"
            charSet 'UTF-8'
        }
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

//    javadoc {
//        options {
//            encoding "UTF-8"
//            charSet 'UTF-8'
//            version true
//            author true
//        }
//
//        if (JavaVersion.current().isJava9Compatible()) {
//            options.addBooleanOption('html5', true)
//        }
//    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// 指定编译的编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
